#include <iostream>#include <fstream>#include <sstream>#include <chrono>#include <iomanip>#include <cmath> #include <random>#include <set>#include <vector>#include <algorithm>#include <hashish.h>void Generatevector(std::vector<std::string> & genvector, std::vector<std::vector<std::string> > & genDiff){	unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();	const std::string VALID_CHARS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";	std::mt19937 generator(seed);	std::uniform_int_distribution<std::mt19937::result_type> distribution(0,VALID_CHARS.size() - 1);		std::ostringstream oss;	std::ofstream fr("../randomText/generuotasTekstas.txt");    std::vector<std::string>::iterator ip;    std::vector<std::string> temp;    while(genvector.size() != 2222222) {        for (std::size_t i = 0; i < 5; ++i)        {            oss << VALID_CHARS[distribution(generator)];        }        std::string first = oss.str();        genvector.push_back(first);        oss.clear();        oss.str("");    }    ip = std::unique(genvector.begin(), genvector.begin()+2222222);    genvector.resize(std::distance(genvector.begin(), ip));    std::vector<std::string>::iterator itr;    for(int i = 0; i < 2222222;i++){        if(i%2==0) {            fr << genvector[i] << " ";        }        else {            fr << genvector[i]<< std::endl;        }    }	fr.close();    std::ofstream off("../randomText/generuotas1Skirtumas.txt");    int skaic = 0;    char tempChar;    std::ostringstream oss1;    std::vector<std::string> firstCol;    std::vector<std::string> secondCol;    for(int j = 0; j < 100000; j++) {        if(skaic == 5) skaic= 0;        for (std::size_t i1 = 0; i1 < 5; ++i1)        {            oss1 << VALID_CHARS[distribution(generator)];        }        std::string first = oss1.str();        std::string second = oss1.str();        tempChar = VALID_CHARS[distribution(generator)];        while(first[skaic] == tempChar){            tempChar = VALID_CHARS[distribution(generator)];        }        first[skaic] = tempChar;        oss1.clear();        oss1.str("");        skaic++;        firstCol.push_back(first);        secondCol.push_back(second);        off << first << " " << second << std::endl;    }    genDiff.push_back(firstCol);    genDiff.push_back(secondCol);    off.close();}